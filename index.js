const TelegramBot = require("node-telegram-bot-api");
var fetchUrl = require("fetch").fetchUrl;
var http = require('http')

const keys = require('./keys.js')

const token = keys.bot_token;
// https://api.nasa.gov/neo/rest/v1/neo/3758838?api_key=${keys.nasa_key} NASA

const bot = new TelegramBot(token, {
    polling: true
});

const second = 1000;
const minute = second * 60;
const hour = minute * 60;

setInterval(() => {
    fetchUrl('https://meduza.io/api/v3/search?chrono=news&locale=ru&page=0&per_page=24', function(error, meta, body) {
        // console.log(body.toString());
        const data = JSON.parse(body.toString())
        if (data._count) {
            let collection = data.collection.slice(0, 8);
            let message = `*8 —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π*
            
`;
            collection.forEach((it, ind) => {
                let article = data.documents[it]
                message = `${message}${ind + 1}. *${article.title}*
[–¥–∞—à](https://meduza.io/${article.url})

`;
            })

            bot.sendMessage('-1001060816045', message, {
                parse_mode: 'Markdown',
                disable_web_page_preview: true
            })

        }
    });
}, hour * 12)

bot.onText(/—Å–ª–∞–≤–∞ —É–∫—Ä–∞–∏–Ω–∏|—Å–ª–∞–≤–∞ —É–∫—Ä–∞–∏–Ω–µ|—Å–ª–∞–≤–∞ —É–∫—Ä–∞—ó–Ω—ñ/i, (msg, match) => {
    console.log('–î–ê–® >>>>>>', match);
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, '–≥–µ—Ä–æ—è–º —Å–ª–∞–≤–∞');
});
bot.onText(/—Ö—Ç–æ –Ω–µ —Å–∫–∞—á–µ|–∫—Ç–æ –Ω–µ —Å–∫–∞—á–µ—Ç|–∫—Ç–æ –Ω–µ —Å–∫–∞—á–µ|—Ö—Ç–æ –Ω—ç —Å–∫–∞—á–µ/i, (msg, match) => {
    console.log('–î–ê–® >>>>>>', match);
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, '—Ç–æ–π –º–æ—Å–∫–∞–ª—å');
});

bot.onText(/^–¥–∞—à$/i, (msg, match) => {
    console.log('–î–ê–®');
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, '—á–æ –¥–∞—Ç—å')
});
bot.onText(/^—á–æ –¥–∞—à$/i, (msg, match) => {
    console.log('–î–ê–® >>>>>>', '—á–æ –¥–∞—à');
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, '\n\nüéæ *—á–æ –¥–∞–º* üéæ\n\nüíß –º–µ–¥—É–∑—É\nüí¶ —Å–≤–µ–∂—É—é –º–µ–¥—É–∑—É\nüåÉ –≥–∏—Ñ–∫—É\nüê± –∫–æ—Ç–∞\nüê∂ –ø—Å–∞\nüêü –ª–µ—â–∞\nü•ï –µ–±–∞—Ç', {
        parse_mode: 'Markdown',
    })
});
bot.onText(/–¥–∞—à (.+)/i, (msg, match) => {
    const chatId = msg.chat.id;
    const resp = match[1].toLowerCase();
    console.log('–î–ê–® >>>>>>', resp);

    if (resp === '—Å–≤–µ–∂—É—é –º–µ–¥—É–∑—É') {
        fetchUrl('https://meduza.io/api/v3/search?chrono=news&locale=ru&page=0&per_page=24', function(error, meta, body) {
            // console.log(body.toString());
            const data = JSON.parse(body.toString())
            if (data._count) {
                let collection = data.collection.slice(0, 5);
                let message = `_5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π:_
                
`;
                collection.forEach((it, ind) => {
                    let article = data.documents[it]
                    message = `${message}${ind + 1}. *${article.title}*
[–¥–∞—à](https://meduza.io/${article.url})

`;
                })

                bot.sendMessage(chatId, message, {
                    parse_mode: 'Markdown',
                    disable_web_page_preview: true
                })

            }
        });
        return;
    }

    if (resp === '–º–µ–¥—É–∑—É') {
        bot.sendMessage(chatId, '_—Å–µ–π—á–∞—Å –≤—ã–±–µ—Ä—É, —á—Ç–æ —Ç–µ–±–µ –¥–∞—Ç—å..._', {
            parse_mode: 'Markdown'
        });



        let data = {};
        let collection = [];
        const pages = 20;

        for (let i = 0; i < pages; i++) {
            fetchUrl(`https://meduza.io/api/v3/search?chrono=news&locale=ru&page=${i}&per_page=24`, function(error, meta, body) {
                // console.log(body.toString());
                const localData = JSON.parse(body.toString());
                collection = collection.concat(collection, localData.collection)
                data = Object.assign({}, data, localData.documents);
                if (i === pages - 1) {
                    setTimeout(() => {
                        post(data, collection)
                    }, 3000)
                }
            })
        }

        function post(data, collection) {
            const rand = Math.floor(Math.random() * 240)
            const phrases = [
                '–≤–æ—Ç —ç—Ç–æ –ø–æ—á–∏—Ç–∞–π',
                '–≤–æ—Ç —á—Ç–æ –Ω–∞—à–ª–∞:',
                '–∑–∞—Ü–µ–Ω–∏ —Å–≤–µ–∂–∞–∫',
                '–≤–æ –ø—Ä–µ–∫–æ–ª',
                '–æ—Ä—É ))',
                '–∞—Ö–∞—Ö —Å–º–∞—Ä–∏ ‚Äî',
            ]
            const oldPhrases = [
                '—ç—Ç–æ –Ω–µ —Å–µ–≥–¥–Ω—è—à–Ω—è—è, –Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ',
                '—Å–º–∞—Ä–∏ —á–æ –Ω–∞—Ä—ã–ª–∞ ))',
                '—Ö–º..',
                '—ç—Ç–æ–π –Ω–æ–≤–æ—Å—Ç–∏ —É–∂–µ –ø–∞—Ä—É –¥–Ω–µ–π',
                '–∞–Ω—É-–∫–∞ –≤–æ—Ç —ç—Ç—É –≥–ª—è–Ω—å',
                '–Ω–µ –æ—á —Å–≤–µ–∂–∞—è —Å—Ç–∞—Ç—å—è, –Ω–æ –Ω–æ—Ä–º',
            ]

            const phrase = (rand > 120) ? oldPhrases[Math.floor(Math.random() * 6)] : phrases[Math.floor(Math.random() * 6)]
            const article = data[collection[rand]]
            const message = `
_${phrase}_

*${article.title}*

[–¥–∞—à](https://meduza.io/${article.url})`;


            bot.sendMessage(chatId, message, {
                parse_mode: 'Markdown',
                disable_web_page_preview: true
            })
        }

        //     const rand = Math.floor(Math.random() * 240)

        return;
    }

    if (resp === '–∫–æ—Ç–∞') {
        fetchUrl('http://thecatapi.com/api/images/get?format=xml&results_per_page=1', function(error, meta, body) {
            const parser = require('xml2json');
            const data = body.toString()
            const json = JSON.parse(parser.toJson(data));
            const image = json.response.data.images.image.url
            bot.sendPhoto(chatId, image)
        });
        return;
    }
    if (resp === '–ø—Å–∞') {
        fetchUrl('https://dog.ceo/api/breeds/image/random', function(error, meta, body) {
            const json = JSON.parse(body.toString());
            const image = json.message
            bot.sendPhoto(chatId, image)
        });
        return;
    }
    if (resp === '–≥–∏—Ñ–∫—É') {
        fetchUrl(`https://api.giphy.com/v1/gifs/random?api_key=${keys.giphy_key}&tag=sex`, function(error, meta, body) {
            const response = JSON.parse(body.toString())
            bot.sendDocument(chatId, response.data.image_mp4_url)
        });
        return;
    }
    if (resp === '–µ–±–∞—Ç') {
        fetchUrl(`https://api.giphy.com/v1/gifs/random?api_key=${keys.giphy_key}&tag=sex`, function(error, meta, body) {
            const response = JSON.parse(body.toString())
            bot.sendDocument(chatId, response.data.image_mp4_url)
        });
        return;
    }
    if (resp === '–ª–µ—â–∞') {
        fetchUrl(`https://api.giphy.com/v1/gifs/random?api_key=${keys.giphy_key}&tag=fight`, function(error, meta, body) {
            const response = JSON.parse(body.toString())
            bot.sendDocument(chatId, response.data.image_mp4_url)
        });
        return;
    }

    const responses = ['–Ω–µ–∞', '–Ω–µ–¥–∞–º', '–æ—Ç—Å—Ç–∞–Ω—å', '–∞ —Ç—ã —á–æ –¥–∞—à', '—á–µ–≥–æ?', '—Å–µ–∫..', '–∞?', '—á–æ?', '–Ω–µ—Ç—É —Ç–∞–∫–æ–≥–æ', '–æ—Ç–≤—è–Ω—å', '—Å–∞–º –¥–∞—à', "—Å–µ–∫, —â–∞ –ø–æ–∏—â—É",
        '–Ω–∞–≥–ª–µ–µ—à', '–∞ —Ç—ã –¥–∞—à?', '—á–æ –ø—Ä–∏—Å—Ç–∞–ª', '–Ω–µ –Ω–∞–≥–ª–µ–π', '—Å–Ω–∞—á–∞–ª–æ —Ç—ã', '((']

    bot.sendMessage(chatId, responses[Math.floor(Math.random() * responses.length)])
});

http.createServer(function(request, response) {
    response.writeHead(200, {
        'Content-type': 'text/plan'
    });
    response.write('All fine');
    response.end();
}).listen(process.env.PORT || 5000);